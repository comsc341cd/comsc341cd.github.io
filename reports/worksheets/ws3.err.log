Traceback (most recent call last):
  File "/Users/tliu/Github/comsc341-cd/venv/lib/python3.11/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Users/tliu/Github/comsc341-cd/venv/lib/python3.11/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/tliu/Github/comsc341-cd/venv/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/tliu/.pyenv/versions/3.11.10/lib/python3.11/asyncio/base_events.py", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/Users/tliu/Github/comsc341-cd/venv/lib/python3.11/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/Users/tliu/Github/comsc341-cd/venv/lib/python3.11/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/tliu/Github/comsc341-cd/venv/lib/python3.11/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------

def generate_bootstrap_dfs(df, n_bootstraps=5000):
    """
    Bootstraps the dataframe `n_bootstraps` times, where each bootstrap sample is the same number of rows as the original dataframe.

    Args:
        df (pd.DataFrame): the dataframe to bootstrap
        n_bootstraps (int): the number of bootstraps to generate

    Returns:
        list[pd.DataFrame]: a list of bootstrapped dataframes
    """
    bootstrap_dfs = []
    # TODO your code here

    return bootstrap_dfs

# Create a simple dataframe to test
df = pd.DataFrame({'review_scores': [4, np.nan, 2, 3], 
                   'review_text': ['I liked it', 'It was awful', 'Bland', 'Pretty good']})

bootstrap_dfs = generate_bootstrap_dfs(df)
assert bootstrap_dfs[0].shape == df.shape, "Each bootstrap sample should be the same size as the original dataframe"
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mIndexError[0m                                Traceback (most recent call last)
Cell [0;32mIn[11], line 22[0m
[1;32m     18[0m df [38;5;241m=[39m pd[38;5;241m.[39mDataFrame({[38;5;124m'[39m[38;5;124mreview_scores[39m[38;5;124m'[39m: [[38;5;241m4[39m, np[38;5;241m.[39mnan, [38;5;241m2[39m, [38;5;241m3[39m], 
[1;32m     19[0m                    [38;5;124m'[39m[38;5;124mreview_text[39m[38;5;124m'[39m: [[38;5;124m'[39m[38;5;124mI liked it[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mIt was awful[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mBland[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mPretty good[39m[38;5;124m'[39m]})
[1;32m     21[0m bootstrap_dfs [38;5;241m=[39m generate_bootstrap_dfs(df)
[0;32m---> 22[0m [38;5;28;01massert[39;00m [43mbootstrap_dfs[49m[43m[[49m[38;5;241;43m0[39;49m[43m][49m[38;5;241m.[39mshape [38;5;241m==[39m df[38;5;241m.[39mshape, [38;5;124m"[39m[38;5;124mEach bootstrap sample should be the same size as the original dataframe[39m[38;5;124m"[39m

[0;31mIndexError[0m: list index out of range

