Traceback (most recent call last):
  File "/Users/tliu/Github/comsc341-cd/venv/lib/python3.11/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Users/tliu/Github/comsc341-cd/venv/lib/python3.11/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/tliu/Github/comsc341-cd/venv/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/tliu/.pyenv/versions/3.11.10/lib/python3.11/asyncio/base_events.py", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/Users/tliu/Github/comsc341-cd/venv/lib/python3.11/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/Users/tliu/Github/comsc341-cd/venv/lib/python3.11/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/tliu/Github/comsc341-cd/venv/lib/python3.11/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
def sim_confounder(n_samples=10000, treatment_effect=1, confounder_effect=3):
    """
    Simulate a confounded treatment and outcome with a single confounder.

    Args:
        n_samples (int): The number of samples to simulate
        treatment_effect (float): The effect of the treatment on the outcome
        confounder_effect (float): The effect of the confounder on the outcome

    Returns:
        A pandas DataFrame with the simulated data:
            - T: The treatment variable
            - X: The confounder variable
            - Y: The outcome variable


    """
    # TODO generate binary confounder in the same way as sim_randomized_experiment
    X = 0
    
    # TODO generate treatment dependent on X and noise
    T = 0

    # TODO generate outcome in the same way as sim_randomized_experiment
    Y = 0

    # Return dataframe with the 3 variables as columns
    #return pd.DataFrame({'T': T, 'X': X, 'Y': Y})

if __name__ == "__main__":
    confound_df = sim_confounder()

    assert confound_df.shape == (10000, 3), "The DataFrame should have 3 columns"
    assert confound_df['T'].nunique() == 2, "The treatment should be binary"
    assert confound_df['X'].nunique() == 2, "The confounder should be binary"

    # Feel free to add more tests here!
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mAttributeError[0m                            Traceback (most recent call last)
Cell [0;32mIn[3], line 33[0m
[1;32m     30[0m [38;5;28;01mif[39;00m [38;5;18m__name__[39m [38;5;241m==[39m [38;5;124m"[39m[38;5;124m__main__[39m[38;5;124m"[39m:
[1;32m     31[0m     confound_df [38;5;241m=[39m sim_confounder()
[0;32m---> 33[0m     [38;5;28;01massert[39;00m [43mconfound_df[49m[38;5;241;43m.[39;49m[43mshape[49m [38;5;241m==[39m ([38;5;241m10000[39m, [38;5;241m3[39m), [38;5;124m"[39m[38;5;124mThe DataFrame should have 3 columns[39m[38;5;124m"[39m
[1;32m     34[0m     [38;5;28;01massert[39;00m confound_df[[38;5;124m'[39m[38;5;124mT[39m[38;5;124m'[39m][38;5;241m.[39mnunique() [38;5;241m==[39m [38;5;241m2[39m, [38;5;124m"[39m[38;5;124mThe treatment should be binary[39m[38;5;124m"[39m
[1;32m     35[0m     [38;5;28;01massert[39;00m confound_df[[38;5;124m'[39m[38;5;124mX[39m[38;5;124m'[39m][38;5;241m.[39mnunique() [38;5;241m==[39m [38;5;241m2[39m, [38;5;124m"[39m[38;5;124mThe confounder should be binary[39m[38;5;124m"[39m

[0;31mAttributeError[0m: 'NoneType' object has no attribute 'shape'

